name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      type:
        description: 'Release Library'
        required: true
        default: '...no release'
        type: choice
        options:
          - '...no release'
          - major
          - minor
          - patch

concurrency:
  # On master, we don't want any jobs cancelled so the sha is used to name the group
  # On PR branches, we cancel the job if new commits are pushed
  # More info: https://stackoverflow.com/a/68422069/253468
  group: ${{ (github.ref == 'refs/heads/master') && format('{0}-{1}', github.workflow_ref, github.sha) || format('{0}-{1}', github.workflow_ref, github.head_ref) }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    if: | # avoid unnecessary pipeline runs during artifact release process ('gradle release plugin')
      !contains(github.event.head_commit.message, '[Gradle Release Plugin] - pre tag commit')
      || github.ref_type == 'tag'

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build with Gradle
        id: Build
        run: ./gradlew build

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: Sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        # skip on the forked repositories that don't have access to secrets
        if: ${{ !cancelled() && env.SONAR_TOKEN != '' }}
        run: |
          ./gradlew \
            sonar -Dsonar.gradle.skipCompile=true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'workflow_dispatch'
      && inputs.type != '...no release'

    steps:
      - name: Validate 'Release Type' param
        env:
          TYPE: ${{ inputs.type }}
        run: |
          valid_types=(major minor patch)
          if [[ ! ${valid_types[*]} =~ "$TYPE" ]]; then
            echo "Unknown release type: $TYPE"
            exit 1
          fi

      - name: Checkout project sources ('main' branch)
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Get current version
        run: |
          source gradle.properties
          echo "current_version=${version}" >> $GITHUB_ENV

      - name: Determine version type
        env:
          TYPE: ${{ inputs.type }}
          VERSION: ${{ env.current_version }}
        run: |
          export major=$(echo "${VERSION}" | cut -d. -f1)
          export minor=$(echo "${VERSION}" | cut -d. -f2)
          export patch=$(echo "${VERSION}" | cut -d. -f3 | cut -d- -f1)
          echo "resolved: ${major}.${minor}.${patch}"
          
          if [[ "$TYPE" == "major" ]]; then
            echo "new_version=$((major+1)).0.0" >> $GITHUB_ENV
            echo "new_snapshot_version=$((major+1)).0.1-SNAPSHOT" >> $GITHUB_ENV
          elif [ "$TYPE" == "minor" ]; then
            echo "new_version=${major}.$((minor+1)).0" >> $GITHUB_ENV
            echo "new_snapshot_version=${major}.$((minor+1)).1-SNAPSHOT" >> $GITHUB_ENV
          else
            echo "new_version=${major}.${minor}.${patch}" >> $GITHUB_ENV
            echo "new_snapshot_version=${major}.${minor}.$((patch+1))-SNAPSHOT" >> $GITHUB_ENV
          fi

      - name: Set git config 'user.name' and 'user.email'
        run: |
          git config --local user.name "GitHub"
          git config --local user.email "action@github.com"

      - name: Run 'gradle release'
        run: |
          echo "Type: ${{ inputs.type }}"
          echo "Current version: ${{ env.current_version }}"
          echo "New version: ${{ env.new_version }}"
          echo "New snapshot version: ${{ env.new_snapshot_version }}"
          echo "./gradlew release -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=${{ env.new_version }} -Prelease.newVersion=${{ env.new_snapshot_version }}"
          gradle release -Prelease.useAutomaticVersion=true -Prelease.releaseVersion=${{ env.new_version }} -Prelease.newVersion=${{ env.new_snapshot_version }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'workflow_dispatch'
      && inputs.type != '...no release'

    steps:
      - name: Checkout project sources ('main' branch)
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: true

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
        
      - name: Sign, release to GitHub, and publish with JReleaser
        env:
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.JRELEASER_MAVENCENTRAL_USERNAME }}
          JRELEASER_MAVENCENTRAL_TOKEN: ${{ secrets.JRELEASER_MAVENCENTRAL_TOKEN }}
          USERNAME: ${{ secrets.USERNAME }}
          TOKEN: ${{ secrets.TOKEN }}
        run: ./gradlew jreleaserFullRelease